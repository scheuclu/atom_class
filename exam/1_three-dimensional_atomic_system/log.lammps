LAMMPS (17 Nov 2016)

variable InitLatPar equal 5.9

# ----- INITIALIZATION

# selecting units (it is important to be consistent)
units           real
# choose dimension of problem
dimension       3
# select boundary conditions
boundary        p p p
# we are handling and atomistic simulation
atom_style      atomic

# ----- ATOM DEFINITION

# define lattice and lattice constant
lattice         fcc ${InitLatPar} orient x 1 0 0 orient y 0 1 0 orient z 0 0 1
lattice         fcc 5.9 orient x 1 0 0 orient y 0 1 0 orient z 0 0 1
Lattice spacing in x,y,z = 5.9 5.9 5.9
# create a block-region with the name box dimension of one lattice unit in each direction
# desired size is around six times the equibrilated unit cell
# Since 32/5.276 ~= 6
region          box block 0 12 0 12 0 12 units lattice
# given this region create a simulation box with ID 1
create_box      1 box
Created orthogonal box = (0 0 0) to (70.8 70.8 70.8)
  1 by 2 by 2 MPI processor grid
# ----- CREATE ATOMS

# finally place the atoms on the lattice places
create_atoms    1 box
Created 6912 atoms
# in the case one wants enforce velocities right in the beginning
#create_atoms   1 random 180 458887 box
# if needed for bigger systems: replicate unit cell
replicate       1 1 1
  orthogonal box = (0 0 0) to (70.8 70.8 70.8)
  1 by 2 by 2 MPI processor grid
  6912 atoms
# assign mass to atoms of group with ID 1
mass            1 86.798

change_box      all x scale 8.997 y scale 8.997 z scale 8.997 remap units box
  orthogonal box = (-283.094 0 0) to (353.894 70.8 70.8)
  orthogonal box = (-283.094 -283.094 0) to (353.894 353.894 70.8)
  orthogonal box = (-283.094 -283.094 -283.094) to (353.894 353.894 353.894)
# ----- DEFINE INTERATOMIC POTENTIAL

# define how the atoms interact: Lennard-Jones potential with cut
pair_style      lj/cut 12.0
# coefficients of potential: assigning for all atoms, epsilon [energy units] sigma [distance units]
pair_coeff  * * 0.3228 3.65

# ----- COMPUTES

# compute the potential energy per atom
compute         eng all pe/atom
# computes the final energy of the cell system
compute         eatoms all reduce sum c_eng

# ----- EQUILIBRATION

# in case other simulation was running before set timestep to zero
reset_timestep	0
# set an appropriate timesetp for time integration
timestep       10

# assign velocity to particles according to temperature and seed
# additional parameters for particles with rotation
velocity all create 275.15 12345 mom yes rot no

## comment: you can also remove the velocity command which means starting at
## a temperature of T = 0K. But then you will need to heat up the system
## choosing T_start = 0K and T_end = 180K for the fix 1 all nvt command.

# thermostat integration for simulating the desired ensemble
# integration on Nose-Hoover hamiltionian equations of motion
fix 1 all npt temp 275.15 275.15 100 iso 1.0 1.0 1000
# FOR BERENDSEN
# fix 1 all nve
# fix 2 all temp/berendsen 180 180 100

# output thermodynamics (T,E,P,etc.) every N=100 step
thermo 100
# specify the thermodynamics to calculate and show as output
thermo_style custom step time lx ly lz press density pxx pyy pzz pe temp pe ke etotal

# dump command for writing the trajectories for every N=250 steps
dump 1 all atom 100 ./dump/NPT/boxmod_damp100_cellnum12_*.atom

# Run for the simulation for desired amount of timesteps until equilibration
log ./logfiles/NPT/boxmod_damp100_cellnum12
m12
